#lang racket
#|Mingjia SHi 104467237|#
(define (merge L1 L)
  (if (null? (cdr L1))
      (cons (car L1) L)
      (cons (car L1) (merge (cdr L1) L))))
(define (ins LL X LR)
  (cond
    ((null? LL) (cons X LR))
    ((null? (cdr LL)) (cons (car LL) (cons X LR)))
    (else (cons (car LL) (ins (cdr LL) X LR)))))
(define (sepR L C)
  (if (eq? C 0)
      L
      (sepR (cdr L) (- C 1))))
(define (sepL L C)
  (if (eq? C 0)
      '()
      (cons (car L) (sepL (cdr L) (- C 1)))))
(define (insl LL L LR)
  (if(null? (cdr L))
     (list (ins LL (car L) LR))
     (cons (ins LL (car L) LR) (insl LL (cdr L) LR))))
(define (insertR L X C)
  (if (eq? (last (sepL L C)) X)
      (insertR L X (+ C 1))
      (if (list? (last (sepL L C)))
          (if (eq? C (length L))
              (merge (insl (sepL L (- C 1)) (insert (last (sepL L C)) X) '()) (list(ins L X '())))
              (merge (merge (insl (sepL L (- C 1)) (insert (last (sepL L C)) X) (sepR L C)) (list(ins (sepL L C) X (sepR L C)))) (insertR L X (+ C 1))))
          (if (eq? C (length L))
              (list (ins L X '()))
              (cons (ins (sepL L C) X (sepR L C)) (insertR L X (+ C 1)))))))
(define (insert L X)
  (cons (ins '() X L) (insertR L X 1)))
(insert '(a (b c)) 'd)