#lang racket
(define (sum lst)
    (if (null? lst)
        0
        (+ (car lst) (sum (cdr lst)))))
(define (nth n l)
  (if (or (> n (length l)) (< n 0))
      (error "Index out of bounds")
      (if (eq? n 0)
          (car l)
          (nth (- n 1) (cdr l)))))
(define (multiply L1 L2 n)
  (if (eq? (min (length L1) (length (car L2))) (+ n 1))
      (list (sum (map * L1 (multi n L2))))
      (cons (sum (map * L1 (multi n L2))) (multiply L1 L2 (+ n 1)))))
(define (multi n L2)
  (if (null? (cdr L2))
      (list (nth n (car L2)))
      (cons (nth n (car L2)) (multi n (cdr L2)))))
(define (multimat L1 L2)
  (if (null? (cdr L1))
      (list (multiply (car L1) L2 0))
      (cons (multiply (car L1) L2 0) (multimat (cdr L1) L2))))
(multimat '((1 2 3 4 5) (6 7 8 9 10) (11 12 13 14 15)) '((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1)))